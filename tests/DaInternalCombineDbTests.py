import os
import os.path
import sys
import tempfile
import unittest
from unittest.mock import MagicMock, Mock, patch

from wwpdb.apps.chemeditor.webapp.DaInternalCombineDb import DaInternalCombineDb

sessionsTopDir = tempfile.mkdtemp()
configInfo = {
    "SITE_DEPOSIT_STORAGE_PATH": tempfile.mkdtemp(),
    "SITE_PREFIX": "PDBE_LOCALHOST",
    "SITE_WEB_APPS_TOP_SESSIONS_PATH": sessionsTopDir,
    "SITE_WEB_APPS_SESSIONS_PATH": os.path.join(sessionsTopDir, "sessions"),
    "SITE_CC_APPS_PATH": tempfile.mkdtemp(),
    "SITE_CC_CVS_PATH": tempfile.mkdtemp(),
    "SITE_DB_PORT_NUMBER": 10,
}

configInfoMockConfig = {
    "return_value": configInfo,
}

configMock = MagicMock(**configInfoMockConfig)

sys.modules["wwpdb.utils.config.ConfigInfo"] = Mock(ConfigInfo=configMock)

# from wwpdb.utils.config.ConfigInfo import ConfigInfo


class DaInternalCombineDbTests(unittest.TestCase):
    """This class tests the API for requesting files generated by
    the chemical components report.

    """

    def setUp(self):
        self._verbose = False
        self._lfh = sys.stderr

    @patch("wwpdb.apps.chemeditor.webapp.DaInternalCombineDb.MyConnectionBase", autospec=True)
    def testGetRelatedEntriesForLigand(self, mockDbBase):
        cursorMock = Mock()
        cursorMock.fetchall.return_value = (("D_800008",), ("D_800009",))
        mockDbBase.return_value.getCursor.return_value = cursorMock

        with DaInternalCombineDb() as db:
            entries = db.getEntriesWithLigand("AAA")
            self.assertSequenceEqual(entries, ["D_800008", "D_800009"])

            cursorMock.fetchall.return_value = ()
            entries = db.getEntriesWithLigand("BBB")
            self.assertSequenceEqual(entries, [])
